{"version":3,"sources":["modules/collapse.js"],"names":["angular","module","provider","controller","this","animation","self","forEach","startCollapsed","isDefined","allowMultiple","$scope","$element","$attrs","activeIndexes","$targets","$active","i","length","index","value","indexOf","activeItems","splice","activateItem","$options","$get","defaults","$collapse","key","$viewChangeListeners","$registerToggle","element","$toggles","push","$unregisterToggle","$unregisterTarget","deactivateItem","fn","fixActiveItemIndexes","$setActive","disallowToggle","isActive","$activeIndexes","link","require","directive","bsCollapseCtrl","controllers","$window","$animate","ngModelCtrl","$setViewValue","$formatters","attrs","modelValue","isArray","scope","bsCollapseToggle","$apply","$on","on","$registerTarget","render","active","action","activeClass","addClass"],"mappings":"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","file":"modules/collapse.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}